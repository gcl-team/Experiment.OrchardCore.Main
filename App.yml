AWSTemplateFormatVersion: '2010-09-09'
Description: "Stack for Orchard Core CMS on ECS."

Parameters:
  CoreNetworkStackName:
    Type: String
    Default: cld-core-network
  ApiGatewayStageName:
    Type: String
    Default: "production"
    AllowedValues:
      - production
      - staging
      - development
  ServiceName:
    Type: String
    Default: cld-orchard-core
    Description: "The service name"
  TempoUrl:
    Type: String
    Description: "The URL of Tempo"
    Default: http://adot-collector:4317
  CmsDBName:
    Type: String
    Default: orchardcorecmsdb
    Description: "The name of the database to create"
  CmsDbMasterUsername:
    Type: String
    Default: orchardcoreroot
  HostedZoneId:
    Type: String
    Default: Z075010133HV9JBFTKEPX
  HostedZoneName:
    Type: String
    Default: chunlinprojects.com
  CmsHostname:
    Type: String
    Default: orchardcms
  OrchardCoreImage:
    Type: String
    Default: 982081087543.dkr.ecr.ap-southeast-5.amazonaws.com/gclteam/orchard-core-cms:latest
  EcsAmi:
    Description: The Amazon Machine Image ID used for the cluster
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

Resources:
  # Unit 01: IAM Role
  iamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ecs"
      Path: !Sub "/${AWS::StackName}/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  # Unit 02: CloudWatch Log Group
  ecsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ServiceName}-log-group"
      RetentionInDays: 3
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName

  ecsLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-cloudwatch-logs-policy"
      Roles:
        - !Ref iamRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ServiceName}-log-group/*"

  ecsMetricsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-cloudwatch-metrics-policy"
      Roles:
        - !Ref iamRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"

  # Unit 03: S3 Bucket
  mediaContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - !Ref ServiceName
          - !Ref AWS::Region
          - !Ref AWS::AccountId
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName

  mediaContentBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${mediaContentBucket}-s3-policy"
      Roles:
        - !Ref iamRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !GetAtt mediaContentBucket.Arn
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Join ["/", [!GetAtt mediaContentBucket.Arn, "*"]]

  # Unit 04: Aurora Database Cluster
  # cmsDBClusterParameterGroup:
  #   Type: AWS::RDS::DBClusterParameterGroup
  #   Properties:
  #     Description: "Aurora Provisioned Postgres DB Cluster Parameter Group"
  #     Family: aurora-postgresql16
  #     Parameters:
  #       timezone: UTC  # Ensures consistent timestamps
  #       rds.force_ssl: 1  # Enforce SSL for security

  # cmsDatabaseCluster:
  #   Type: AWS::RDS::DBCluster
  #   Properties:
  #     BackupRetentionPeriod: 7
  #     DatabaseName: !Ref CmsDBName
  #     DBClusterIdentifier: !Ref AWS::StackName
  #     DBClusterParameterGroupName: !Ref cmsDBClusterParameterGroup
  #     DeletionProtection: false  # For production, it should be true
  #     Engine: aurora-postgresql
  #     EngineMode: provisioned
  #     EngineVersion: 16.1
  #     MasterUsername: !Ref CmsDbMasterUsername
  #     MasterUserPassword: !Sub "{{resolve:ssm-secure:/OrchardCoreCms/DbPassword:1}}"
  #     DBSubnetGroupName: !Ref cmsDBSubnetGroup
  #     VpcSecurityGroupIds:
  #       - !GetAtt cmsDBSecurityGroup.GroupId
  #     Tags:
  #       - Key: Stack
  #         Value: !Ref AWS::StackName

  # Unit 05: Aurora Database Instance
  # cmsDBInstance:
  #   Type: 'AWS::RDS::DBInstance'
  #   DeletionPolicy: Retain
  #   Properties:
  #     DBInstanceIdentifier: !Sub "${AWS::StackName}-db-instance"
  #     DBInstanceClass: db.t4g.medium
  #     DBClusterIdentifier: !Ref cmsDatabaseCluster
  #     DBSubnetGroupName: !Ref cmsDBSubnetGroup
  #     Engine: aurora-postgresql
  #     Tags:
  #       - Key: Stack
  #         Value: !Ref AWS::StackName

  # cmsDBSubnetGroup:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties:
  #     DBSubnetGroupDescription: "Orchard Core CMS Postgres DB Subnet Group"
  #     SubnetIds:
  #       - !Ref privateSubnet1
  #       - !Ref privateSubnet2
  #     Tags:
  #       - Key: Stack
  #         Value: !Ref AWS::StackName

  # Unit 06: Security Groups
  # cmsDBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub "${CmsDBName}-security-group"
  #     GroupDescription: "Permits Access To CMS Aurora Database"
  #     VpcId: {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-vpcId"}
  #     SecurityGroupIngress:
  #     - CidrIp: {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet1CidrBlockId"}
  #       IpProtocol: tcp
  #       FromPort: 5432
  #       ToPort: 5432
  #     - CidrIp: {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet2CidrBlockId"}
  #       IpProtocol: tcp
  #       FromPort: 5432
  #       ToPort: 5432
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${CmsDBName}-security-group"
  #       - Key: Stack
  #         Value: !Ref AWS::StackName

  # Unit 07: Elastic Load Balancing (ELB)
  internalNlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ServiceName}-private-nlb"
      Scheme: internal
      Type: network
      Subnets:
        - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet1Id"}
        - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet2Id"}
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false" # For production, it should be true
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName

  nlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - internalNlb
    Properties:
      Name: !Sub "${ServiceName}-target-group"
      Port: 80
      Protocol: TCP
      TargetType: ip
      VpcId: {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-vpcId"}
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /health
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName

  internalNlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref internalNlb
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref nlbTargetGroup

  # Unit 08: API Gateway
  apiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ServiceName}-api-gateway"
      DisableExecuteApiEndpoint: True
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy: ''

  apiGatewayVpcLink:
    Type: AWS::ApiGateway::VpcLink
    Description: "VPC link for API Gateway of Orchard Core"
    Properties:
      Name: !Sub "${ServiceName}-vpc-link"
      TargetArns:
        - !Ref internalNlb

  apiGatewayRootProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGatewayRestApi
      ParentId: !GetAtt apiGatewayRestApi.RootResourceId
      PathPart: '{proxy+}'
    DependsOn:
      - apiGatewayRestApi

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      ApiKeyRequired: False
      RestApiId: !Ref apiGatewayRestApi
      ResourceId: !GetAtt apiGatewayRestApi.RootResourceId
      Integration:
        ConnectionId: !Ref apiGatewayVpcLink
        ConnectionType: VPC_LINK
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub "http://${internalNlb.DNSName}"
    DependsOn:
      - apiGatewayRootProxyResource

  apiGatewayRootProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: False
      RestApiId: !Ref apiGatewayRestApi
      ResourceId: !Ref apiGatewayRootProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: True
      Integration:
        ConnectionId: !Ref apiGatewayVpcLink
        ConnectionType: VPC_LINK
        Type: HTTP_PROXY
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        CacheKeyParameters:
          - method.request.path.proxy
        IntegrationHttpMethod: ANY
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 200
        Uri: !Sub "http://${internalNlb.DNSName}/{proxy}"
    DependsOn:
      - apiGatewayRootProxyResource
      - apiGatewayVpcLink

  apiGatewayDeployment202501011048:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref apiGatewayRestApi
    DependsOn:
      - apiGatewayRootMethod
  
  apiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref ApiGatewayStageName
      RestApiId: !Ref apiGatewayRestApi
      DeploymentId: !Ref apiGatewayDeployment202501011048
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 200
          ThrottlingRateLimit: 50
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName

  # Unit 09: Route53 for API Gateway
  apiGatewayCustomDomainCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${CmsHostname}.${HostedZoneName}"
      ValidationMethod: 'DNS'
      DomainValidationOptions:
        - DomainName: !Sub "${CmsHostname}.${HostedZoneName}"
          HostedZoneId: !Ref HostedZoneId
  
  apiGatewayCustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref apiGatewayCustomDomainCert
      DomainName: !Sub "${CmsHostname}.${HostedZoneName}"
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  apiGatewayCustomDomainBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref apiGatewayCustomDomainName
      RestApiId: !Ref apiGatewayRestApi
      Stage: !Ref apiGatewayStage

  apiGatewayCustomDomainARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !Sub "${CmsHostname}.${HostedZoneName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt apiGatewayCustomDomainName.RegionalDomainName
        HostedZoneId: !GetAtt apiGatewayCustomDomainName.RegionalHostedZoneId

  # Reference 01: ECS Cluster (Ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html)
  ecsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "core-cluster"
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  
  ecsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - ecsCluster
      - ec2Role
    Properties:
      VPCZoneIdentifier:
        - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet1Id"}
        - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet2Id"}
      LaunchTemplate:
        LaunchTemplateId: !Ref containerInstances
        Version: !GetAtt containerInstances.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 2
      NewInstancesProtectedFromScaleIn: true
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"
  
  containerInstances:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "asg-launch-template"
      LaunchTemplateData:
        ImageId: !Ref EcsAmi
        InstanceType: "t3.large"
        IamInstanceProfile:
          Name: !Ref ec2InstanceProfile
        SecurityGroupIds: 
          - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-ecsContainerHostSecurityGroupId"}
        # This injected configuration file is how the EC2 instance
        # knows which ECS cluster it should be joining
        UserData:
          Fn::Base64: !Sub |
           #!/bin/bash -xe
           echo "ECS_CLUSTER=core-cluster" >> /etc/ecs/ecs.config
        # Disable IMDSv1, and require IMDSv2
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
  
  ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
      - !Ref ec2Role 
  
  ecsCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ecsAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 100
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED
  
  ecsCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - !Ref ecsCapacityProvider
      Cluster: !Ref ecsCluster
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref ecsCapacityProvider
          Weight: 1
  
  ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: ECSAdditionalPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RegisterContainerInstance
                  - ecs:CreateCluster
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                Resource: "*"

  ecsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub "/${AWS::StackName}/"
      RoleName: !Sub "${AWS::StackName}-ecs-task-execution"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-ssm-policy-for-adot'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/otel-collector-config'

  # Unit 10: ECS Task Definition and Service
  ecsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      NetworkMode: awsvpc 
      ExecutionRoleArn: !GetAtt ecsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt iamRole.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref OrchardCoreImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ServiceName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Cpu: 256
          Memory: 1024
          MemoryReservation: 512
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: OpenTelemetry__TempoUrl
              Value: !Ref TempoUrl
          #   - Name: DatabaseEndpoint
          #     Value: !GetAtt cmsDBInstance.Endpoint.Address
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - "wget -q --spider http://localhost:80/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

        - Name: adot-collector
          Image: public.ecr.aws/aws-observability/aws-otel-collector:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ServiceName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: adot
          Essential: false
          Cpu: 128
          Memory: 512
          HealthCheck:
            Command: ["/healthcheck"]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          Secrets:
            - Name: AOT_CONFIG_CONTENT
              ValueFrom: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/otel-collector-config"
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region

  ecsService:
    Type: AWS::ECS::Service
    DependsOn:
      - iamRole
      - ecsTaskExecutionRole
      - internalNlb
      - nlbTargetGroup
      - internalNlbListener
    Properties:
      Cluster: !GetAtt ecsCluster.Arn
      DesiredCount: 1   # For production, it should be at least 2
      DeploymentConfiguration:
        MaximumPercent: 200    
        MinimumHealthyPercent: 0    # For production, it can be 50 (at least 1 is running)
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 80
          TargetGroupArn: !Ref nlbTargetGroup
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: spread
          Field: instanceId
      TaskDefinition: !Ref ecsTaskDefinition
      ServiceName: !Ref ServiceName
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-ecsContainerHostSecurityGroupId"}
          Subnets:
            - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet1Id"}
            - {"Fn::ImportValue": !Sub "${CoreNetworkStackName}-${AWS::Region}-privateSubnet2Id"}

  # Unit 11: CloudWatch Alarm
  highCpuUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-high-cpu"
      AlarmDescription: !Sub "ECS service ${AWS::StackName}: Cpu utilization above 75%"
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref ecsCluster
        - Name: ServiceName
          Value: !Ref ServiceName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 75
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      ActionsEnabled: true
      AlarmActions: []
      OKActions: []

  noRunningTasksAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-no-task"
      AlarmDescription: !Sub "ECS service ${AWS::StackName}: No running ECS tasks for more than 5 mins"
      Namespace: AWS/ECS
      MetricName: RunningTaskCount
      Dimensions:
        - Name: ClusterName
          Value: !Ref ecsCluster
        - Name: ServiceName
          Value: !Ref ServiceName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: notBreaching
      ActionsEnabled: true
      AlarmActions: []
      OKActions: []
