AWSTemplateFormatVersion: "2010-09-09"
Description: "The core network with VPC, public subnets, private subnets, and internet gateway"

Parameters:
  VpcCIDR:
    Type: String
    Description: "VPC CIDR Block"
    Default: 10.0.0.0/16
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  ServiceName:
    Type: String
    Default: cld-core-network
    Description: "The service name"

Resources:
  # Unit 01: Virtual Private Cloud (VPC)
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${AWS::Region}-vpc"

  # Unit 02: Subnets and Subnet Groups
  # Public Subnets
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${AWS::Region}-public-subnet-1"

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${AWS::Region}-public-subnet-2"

  # Private Subnets
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${AWS::Region}-private-subnet-1"

  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${AWS::Region}-private-subnet-2"

  # Unit 03: Internet Gateway
  coreInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${AWS::Region}-igw"

  vpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref coreInternetGateway

  vpcPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc

  vpcPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: vpcGatewayAttachment
    Properties:
      RouteTableId: !Ref vpcPublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref coreInternetGateway

  vpcPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref vpcPublicRouteTable

  vpcPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      RouteTableId: !Ref vpcPublicRouteTable

  eip:
    Type: AWS::EC2::EIP

  natGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt eip.AllocationId
      SubnetId: !Ref publicSubnet1

  vpcPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc

  vpcPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: natGateway
    Properties:
      RouteTableId: !Ref vpcPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGateway

  vpcPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet1
      RouteTableId: !Ref vpcPrivateRouteTable

  vpcPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet2
      RouteTableId: !Ref vpcPrivateRouteTable

  # Unit 04: Security Group

  ecsContainerHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the EC2 hosts that run containers
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"  # Allow all outbound traffic

Outputs:
  vpcId:
    Description: "VPC Id"
    Value: !Ref vpc
    Export:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-vpcId"

  publicSubnet1Id:
    Description: "Public Subnet 1 Id"
    Value: !Ref publicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-publicSubnet1Id"

  publicSubnet2Id:
    Description: "Public Subnet 2 Id"
    Value: !Ref publicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-publicSubnet2Id"

  privateSubnet1Id:
    Description: "Private Subnet 1 Id"
    Value: !Ref privateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-privateSubnet1Id"

  privateSubnet2Id:
    Description: "Private Subnet 2 Id"
    Value: !Ref privateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-privateSubnet2Id"

  ecsContainerHostSecurityGroupId:
    Description: Security Group ID for ECS container hosts
    Value: !Ref ecsContainerHostSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-ecsContainerHostSecurityGroupId"
